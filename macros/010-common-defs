%system_python python2

##### fedora compatibility #####

%py_setup setup.py
%py_shbang_opts -s

##### binary suffixes for flavors #####

%python2_bin_suffix %python2_version
%python3_bin_suffix %python3_version
%pypy3_bin_suffix   pp%{pypy3_version}

##### fallback preferred configuration #####

# This can't be in a conditional section because there are no conditional
# sections. Instead, `python2` is hardcoded here, to be reconfigured through
# future package updates (supposedly).

%python_sitelib          %python2_sitelib
%python_sitearch         %python2_sitearch
%python_version          %python2_version
%python_version_nodots   %python2_version_nodots

# I am honestly not quite sure how the following works. By all logic it should not.
# I suppose that the macro body is copied here and applied on the `%1`?
%python_alternative()           %{expand:%python2_alternative}
%python_alternative_man()       %{expand:%python2_alternative_man}
%python_install_alternative()   %{expand:%python2_install_alternative}
%python_uninstall_alternative() %{expand:%python2_uninstall_alternative}

%py_ver  %python_version

##### common code for alternative name creation #####
%_python_alternative_origin(b:) %{lua: do \
    local param = rpm.expand("%1") \
    local binsuffix = rpm.expand("%{-b*}") \
    -- try manpage syntax \
    local try = param:gsub("/(.*)%.(%d)%.gz$", "/%1-" .. binsuffix .. ".%2.gz") \
    -- try simple file extension \
    if try == param then try = param:gsub("/(.*)%.(.-)$", "/%1-" .. binsuffix .. ".%2") end \
    -- append binsuffix \
    if try == param then try = param .. "-" .. binsuffix end \
    print(try) \
end }

