# TODO this should not be here
%have_python2 1
%have_python3 1
# do not define pypy3

%pythons %{?have_python2:python2} %{?have_python3:python3} %{?have_pypy3:pypy3}

# TODO for now the requirement is on "python-" not "python2-" because aliases in python do not exist
%python_module() %{expand: %{?have_python2:python-%1} %{?have_python3:python3-%1} %{?have_pypy3:pypy3-%1}}

%if_python_kind() %if %{_scan_spec} %{lua: if flavor == rpm.expand("%1") then print("1") else print("0") end}
%if_not_python_kind() %if %{_scan_spec} %{lua: if flavor == rpm.expand("%1") then print("0") else print("1") end}

%ifpython3 %{if_python_kind python3}
%ifpython2 %{if_python_kind python2}
%ifpypy3 %{if_python_kind pypy3}

%python3_only() %ifpython3 \
%** \
%endif

%python2_only() %ifpython2 \
%** \
%endif

%pypy3_only() %ifpypy3 \
%** \
%endif

%pycache_only() %{if_not_python_kind python2} \
%** \
%endif

%_python_pop_flavor() \
if [ -d build ]; then mv build _build.tmp; fi \
if [ -d _build.%1 ]; then mv _build.%1 build; fi \
%{nil}

%_python_push_flavor() \
if [ -d build ]; then mv build _build.%1; fi \
if [ -d _build.tmp ]; then mv _build.tmp build; fi \
%{nil}


### LUA-MACROS ###


# %1 - flavor; %2 - modname (subpackage name)
%_python_subpackage_for() \
%package -n %1-%2 \
Summary: %summary \
Version: %version \
%_python_output_requires \
%description -n %1-%2 \
%_python_output_description \
%files -n %1-%2 \
%{expand:%_python_output_filelist} \
%{expand:%_python_output_scriptlets} \
%{nil}


%python_subpackages \
%{_python_scan_spec} \
%{expand:%{_python_output_subpackages}}
