%have_python  1
%have_python3 1

%pythons %{?have_python:python} %{?have_python3:python3}

%flavor_python3 Python 3
%flavor_python Python 2
%flavor_pypy PyPy

%python_buildrequires BuildRequires: %{expand: %{?have_python:python-devel} %{?have_python3:python3-devel} %{?have_pypy:pypy-devel}}

# specify unused flag to avoid recursive expansion bug
%_unrecurse_python_module(x:) %{expand: %{?have_python:python-%{-x*}} %{?have_python3:python3-%{-x*}} %{?have_pypy:pypy-%{-x*}}}

%python_buildrequire() BuildRequires: %{_unrecurse_python_module -x %1}
%python_module() %{expand: %{_unrecurse_python_module -x %1}}

%if_python_kind() %if %{_scan_spec} %{lua: if modprefix == rpm.expand("%1") then print("1") else print("0") end}

%ifpython3 %{if_python_kind python3}
%ifpython2 %{if_python_kind python}
%ifpypy %{if_python_kind pypy}

%py3_only() %ifpython3 \
%** \
%endif

%py2_only() %ifpython2 \
%** \
%endif

%pypy_only() %ifpypy \
%** \
%endif

%python_exec() for flavor in %pythons; do \
    if [ -d build ]; then mv build _build.tmp; fi \
    if [ -d _build.$flavor ]; then mv _build.$flavor build; fi \
    $flavor %** \
    if [ -d build ]; then mv build _build.$flavor; fi \
    if [ -d _build.tmp ]; then mv _build.tmp build; fi \
done \
%{nil}

### LUA-MACROS ###


# %1 - flavor; %2 - modname (subpackage name)
%_subpackage_for() \
%package -n %1-%2 \
Summary: %summary \
Version: %version \
%_output_requires \
%description -n %1-%2 \
%{_output_description} \
%files -n %1-%2 \
%{expand:%{_output_filelist}} \
%{expand:%{_output_scriptlets}} \
%{nil}


%_modname_from_name %{lua: print(modname)}
%_specpath %{lua: print(specpath)}


%python_subpackages \
%{_scan_spec} \
%{expand:%( for flavor in %pythons; do \
    [ "$flavor-%_modname_from_name" == "%name" ] && continue \
    echo "%%{_subpackage_for $flavor %_modname_from_name}" \
done )}


%python_build %python_exec setup.py build

%python_install %python_exec setup.py install --root=%{buildroot}

%py2_build    python2 setup.py build
%py2_install  python2 setup.py install --root=%{buildroot}
%py3_build    python3 setup.py build
%py3_install  python3 setup.py install --root=%{buildroot}
%pypy_build   pypy setup.py build
%pypy_install pypy setup.py install --root=%{buildroot}

#####

%prepare_alternative(t:) \
%define alternative_target %{-t:%{-t*}}%{!-t:%{_bindir}/%1} \
rm -f %{buildroot}%{alternative_target} \
mkdir -p %{buildroot}%{_sysconfdir}/alternatives \
touch %{buildroot}%{_sysconfdir}/alternatives/%1 \
ln -sf %{_sysconfdir}/alternatives/%1 %{buildroot}%{alternative_target} \
%{nil}

%install_alternative(s:t:p:n:) \
%define alternative_name %{-n:%{-n*}}%{!-n:%1} \
%define alternative_source %{-s:%{-s*}}%{!-s:%{_bindir}/%{alternative_name}} \
%define alternative_target %{-t:%{-t*}}%{!-t:%2} \
%define alternative_priority %{-p:%{-p*}}%{!-p:%3} \
update-alternatives --install \\\
    %{alternative_source} \\\
    %{alternative_name} \\\
    %{alternative_target} \\\
    %{alternative_priority}

%uninstall_alternative(n:t:) \
%define alternative_name %{-n:%{-n*}}%{!-n:%1} \
%define alternative_target %{-t:%{-t*}}%{!-t:%2} \
if [ $1 -eq 0 ]; then \
    update-alternatives --remove %{alternative_name} %{alternative_target} \
fi \
%{nil}

######

%python_alternative() \
%{_bindir}/%1 \
%{_bindir}/%1-%{py_ver} \
%ghost %{_sysconfdir}/alternatives/%1 \
%{nil}

%python3_alternative() \
%{_bindir}/%1 \
%{_bindir}/%1-%{py3_ver} \
%ghost %{_sysconfdir}/alternatives/%1 \
%{nil}

%python_install_alternative() \
%define prio %{expand:%(echo %{py_ver} | tr -d .)} \
%install_alternative -n %1 -t %{_bindir}/%1-%{py_ver} -p %{prio}

%python3_install_alternative() \
%define prio %{expand:%(echo %{py3_ver} | tr -d .)} \
%install_alternative -n %1 -t %{_bindir}/%1-%{py3_ver} -p %{prio}

%python_uninstall_alternative() %uninstall_alternative -n %1 -t %{_bindir}/%1-%{py_ver}
#### TODO je pot≈ôeba tohle nilovat???

%python3_uninstall_alternative() %uninstall_alternative -n %1 -t %{_bindir}/%1-%{py3_ver}
